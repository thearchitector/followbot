# Start from a base Docker distribution (Ubuntu 18.04)
FROM arm32v7/ros:melodic-ros-core-bionic

ENV HOME /home/bot
WORKDIR /home/bot

RUN export uid=1000 gid=1000 && \
    mkdir -p /home/bot && \
    mkdir -p /etc/sudoers.d && \
    echo "bot:x:${uid}:${gid}:Bot,,,:/home/bot:/bin/bash" >> /etc/passwd && \
    echo "bot:x:${uid}:" >> /etc/group && \
    echo "bot ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/bot && \
    chmod 0440 /etc/sudoers.d/bot && \
    chown ${uid}:${gid} -R /home/bot && \
    apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    apt-add-repository ppa:ubuntuhandbook1/apps && \
    apt-get update && \
    # Install a whole bunch of dependencies
    apt-get -y --no-install-recommends install build-essential cmake git sudo vim curl pkg-config \
    libjpeg-turbo8-dev libtiff5-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
    libxvidcore-dev libx264-dev libgtk2.0-dev libgtk-3-dev libcanberra-gtk* libatlas-base-dev \
    gfortran libtbb-dev libeigen3-dev ros-melodic-rosserial ros-melodic-rosserial-arduino && \ 
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

# Add bot user to the dialout group to permiss writing to USB serial
RUN sed "s/^dialout.*/&bot/" /etc/group -i && \
    sed "s/^root.*/&bot/" /etc/group -i

# Build and install OpenCV
RUN mkdir /tmp/opencv && \
    git clone --branch 4.1.2 --depth 1 https://github.com/opencv/opencv.git /tmp/opencv/core && \
    git clone --branch 4.1.2 --depth 1 https://github.com/opencv/opencv_contrib.git /tmp/opencv/contrib && \
    cd /tmp/opencv/core && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=RELEASE -DINSTALL_C_EXAMPLES=OFF -DWITH_TBB=ON -DWITH_V4L=ON \
          -DWITH_QT=OFF -DWITH_OPENGL=OFF -DOPENCV_EXTRA_MODULES_PATH=../../contrib/modules \
          -DBUILD_EXAMPLES=OFF -DBUILD_DOCS=OFF -DBUILD_PERF_TESTS=OFF -WITH_VTK=OFF -DBUILD_TESTS=OFF \
          -DWITH_OPENMP=ON -DWITH_IPP=OFF -DWITH_CSTRIPES=ON -DENABLE_NEON=ON -DENABLE_VFPV3=ON \
          -DCMAKE_CXX_FLAGS="-DTBB_USE_GCC_BUILTINS=1 -D_TBB_64BIT_ATOMICS=0" -DOPENCV_ENABLE_NONFREE=ON \
          -DENABLE_CXX11=ON -DBUILD_opencv_python2=OFF -BUILD_opencv_python3=OFF -DPYTHON2_EXECUTABLE="" \
          -DPYTHON3_EXECUTABLE="" -DCMAKE_SHARED_LINKER_FLAGS="-latomic" -DWITH_GSTREAMER=ON \
          -DEXTRA_C_FLAGS=-mcpu=cortex-a7 -mfpu=neon-vfpv4 -ftree-vectorize -mfloat-abi=hard \
          -DEXTRA_CXX_FLAGS=-mcpu=cortex-a7 -mfpu=neon-vfpv4 -ftree-vectorize -mfloat-abi=hard \
          -DINSTALL_PYTHON_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ../ && \
    # Compile with max number of cores
    make -j4 && \
    make install && \
    rm -rf /tmp/*
    
# Setup bash entry point
COPY ./entrypoint.raspi /ros_entrypoint.sh
RUN chmod +x /ros_entrypoint.sh
ENV IS_RPI true

# Git clone the repo and download DNN detection weights
RUN git clone https://github.com/thearchitector/followbot.git /home/bot/followbot && \
    cd /home/bot/followbot/raspi/followbot_ws/src/followbot/config && \
    sh download_weights.sh
