# Start from a base Docker distribution (Ubuntu 18.04)
FROM ros:melodic-ros-core-bionic

RUN export uid=1000 gid=1000 && \
    mkdir -p /home/developer && \
    mkdir -p /etc/sudoers.d && \
    echo "developer:x:${uid}:${gid}:Developer,,,:/home/developer:/bin/bash" >> /etc/passwd && \
    echo "developer:x:${uid}:" >> /etc/group && \
    echo "developer ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/developer && \
    chmod 0440 /etc/sudoers.d/developer && \
    chown ${uid}:${gid} -R /home/developer && \
    apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    apt-add-repository ppa:git-core/ppa && \
    apt-get update && \
    apt-get -y --no-install-recommends upgrade && \
    # Install a whole bunch of dependencies
    apt-get -y --no-install-recommends install build-essential cmake git libgtk-3-dev libxt-dev \
    pkg-config libavcodec-dev libavformat-dev libswscale-dev libtbb2 libtbb-dev curl sudo usbutils \
    libvtk7-dev ros-melodic-rosserial-server vim && \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

# Add developer user to the dialout group to permiss writing to USB serial
#RUN sed "s/^dialout.*/&developer/" /etc/group -i && \
#    sed "s/^root.*/&developer/" /etc/group -i
RUN usermod -a -G dialout developer && \
    usermod -a -G root developer

# Download and install CLion
RUN curl -L "https://download.jetbrains.com/cpp/CLion-2019.3.tar.gz" -o /tmp/clion.tar.gz && \
    tar -xzf /tmp/clion.tar.gz --directory /etc && \
    ln -s /etc/clion-2019.3/bin/clion.sh /etc/clion-2019.3/bin/clion && \
    rm -rf /tmp/clion.tar.gz
ENV PATH="/etc/clion-2019.3/bin:${PATH}"

# Download and install Arduino IDE
RUN curl -L "https://downloads.arduino.cc/arduino-1.8.10-linux64.tar.xz" -o /tmp/arduinoide.tar.xz && \
    tar -xJf /tmp/arduinoide.tar.xz --directory /etc && \
    /etc/arduino-1.8.10/install.sh && \
    rm -rf /tmp/arduinoide.tar.xz

# Download and install VTK
# RUN git clone https://gitlab.kitware.com/vtk/vtk.git /opt/vtk && \
#    cd /opt/vtk && \
#    git checkout --track -b release origin/release && \
#    mkdir build && \
#    cd build && \
#    cmake -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF ../ && \
#    make -j$(nproc --ignore=1) && \
#    make install

# Build and install OpenCV
RUN mkdir /tmp/opencv && \
    git clone --branch 4.1.2 --depth 1 https://github.com/opencv/opencv.git /tmp/opencv/core && \
    git clone --branch 4.1.2 --depth 1 https://github.com/opencv/opencv_contrib.git /tmp/opencv/contrib && \
    cd /tmp/opencv/core && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=RELEASE -DINSTALL_C_EXAMPLES=OFF -DWITH_TBB=ON -DWITH_V4L=ON \
          -DWITH_QT=OFF -DWITH_OPENGL=ON -DOPENCV_EXTRA_MODULES_PATH=../../contrib/modules \
          -DBUILD_EXAMPLES=OFF -DBUILD_DOCS=OFF -DBUILD_PERF_TESTS=OFF -WITH_VTK=ON -DBUILD_TESTS=OFF \
          -DWITH_OPENMP=ON -DWITH_IPP=ON -DWITH_CSTRIPES=ON -DCMAKE_CXX_FLAGS="-DTBB_USE_GCC_BUILTINS=1" \
          -DOPENCV_ENABLE_NONFREE=ON -DENABLE_CXX11=ON -DBUILD_opencv_python2=OFF -BUILD_opencv_python3=OFF \
          -DPYTHON2_EXECUTABLE="" -DPYTHON3_EXECUTABLE="" -DWITH_CUDA=OFF \ #-VTK_DIR=/opt/vtk/build \
          -DCMAKE_INSTALL_PREFIX=/usr/local ../ && \
    # Compile with max number of core
    make -j$(nproc --ignore=1) && \
    make install && \
    rm -rf /tmp/*

# Setup bash entry point
COPY ./entrypoint.dev /ros_entrypoint.sh
RUN chmod +x /ros_entrypoint.sh

# Setup user and configure environment
USER developer
ENV HOME /home/developer
WORKDIR /home/developer

# Git clone the repo and download DNN detection weights
RUN git clone https://github.com/thearchitector/followbot.git /home/developer/followbot && \
    cd /home/developer/followbot/raspi/followbot_ws/src/followbot/config && \
    sh download_weights.sh

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
