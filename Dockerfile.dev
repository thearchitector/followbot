# Start from a base Docker distribution (Ubuntu 18.04)
FROM ros:melodic-ros-core-bionic

ENV USERNAME developer
ENV HOME /home/$USERNAME

RUN useradd -m $USERNAME && \
    echo "$USERNAME:$USERNAME" | chpasswd && \
    usermod --shell /bin/bash $USERNAME && \
    usermod -aG sudo $USERNAME && \
    echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
    chmod 0440 /etc/sudoers.d/$USERNAME && \
    usermod  --uid 1000 $USERNAME && \
    groupmod --gid 1000 $USERNAME && \
    echo "deb http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main" >> /etc/apt/source.list && \
    echo "deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main" >> /etc/apt/source.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys e1dd270288b4e6030699e45fa1715d88e1df1f24 && \
    apt-get update && \
    apt-get -y --no-install-recommends upgrade && \
    # Install a whole bunch of dependencies
    apt-get -y --no-install-recommends install build-essential git libgtk-3-dev libavcodec-dev \
    libavformat-dev libswscale-dev libtbb-dev curl usbutils xauth libvtk7-dev vim \
    ros-melodic-rosserial-arduino && \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/*

# Add developer user to the dialout group to permiss writing to USB serial
RUN sed "s/^dialout.*/&$USERNAME/" /etc/group -i && \
    sed "s/^root.*/&$USERNAME/" /etc/group -i

# Download and install CLion
#ENV CLION_VERSION 2019.3.1
#RUN curl -L "https://download.jetbrains.com/cpp/CLion-$CLION_VERSION.tar.gz" -o /tmp/clion.tar.gz && \
#    tar -xzf /tmp/clion.tar.gz --directory /opt && \
#    ln -s /opt/clion-$CLION_VERSION/bin/clion.sh /opt/clion-$CLION_VERSION/bin/clion && \
#ENV PATH="/opt/clion-$CLION_VERSION/bin:${PATH}"

# Download and install Arduino IDE
RUN curl -L "https://downloads.arduino.cc/arduino-1.8.10-linux64.tar.xz" -o /tmp/arduinoide.tar.xz && \
    tar -xJf /tmp/arduinoide.tar.xz --directory /opt && \
    /opt/arduino-1.8.10/install.sh && \
    rm -rf /tmp/*

# Build and install OpenCV
RUN mkdir /tmp/opencv && \
    git clone --branch 4.1.2 --depth 1 https://github.com/opencv/opencv.git /tmp/opencv/core && \
    git clone --branch 4.1.2 --depth 1 https://github.com/opencv/opencv_contrib.git /tmp/opencv/contrib && \
    cd /tmp/opencv/core && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=RELEASE -DINSTALL_C_EXAMPLES=OFF -DWITH_TBB=ON -DWITH_V4L=ON \
          -DWITH_QT=OFF -DWITH_OPENGL=ON -DOPENCV_EXTRA_MODULES_PATH=../../contrib/modules \
          -DBUILD_EXAMPLES=OFF -DBUILD_DOCS=OFF -DBUILD_PERF_TESTS=OFF -WITH_VTK=ON -DBUILD_TESTS=OFF \
          -DWITH_OPENMP=ON -DWITH_IPP=ON -DWITH_CSTRIPES=ON -DCMAKE_CXX_FLAGS="-DTBB_USE_GCC_BUILTINS=1" \
          -DOPENCV_ENABLE_NONFREE=ON -DENABLE_CXX11=ON -DBUILD_opencv_python2=OFF -BUILD_opencv_python3=OFF \
          -DPYTHON2_EXECUTABLE="" -DPYTHON3_EXECUTABLE="" -DWITH_CUDA=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ../ && \
    # Compile with max number of core
    make -j$(nproc --ignore=1) && \
    make install && \
    rm -rf /tmp/*

# Setup bash entry point
COPY ./entrypoint.dev /ros_entrypoint.sh
RUN chmod +x /ros_entrypoint.sh

USER $USERNAME
WORKDIR /home/$USERNAME/followbot

# Git clone the repo and download DNN detection weights
RUN git clone https://github.com/thearchitector/followbot.git /home/$USERNAME/followbot && \
    cd /home/$USERNAME/followbot/raspi/followbot_ws/src/followbot/config && \
    sh download_weights.sh
